{"version":3,"sources":["components/Todo.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","todo","removeElement","completeTask","className","type","id","htmlFor","onClick","style","completed","background","textDecoration","color","title","Header","React","useState","uuidv4","todoList","setTodoList","useEffect","console","log","all","setAll","active","setActive","setCompleted","compcount","setCompcount","array","index","indexOf","splice","i","item","length","document","body","classList","toggle","placeholder","onChange","newItem","querySelector","addEventListener","e","charCode","value","map","name","defaultChecked","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0380d68a.chunk.js","sourcesContent":["import React from 'react'\r\nconst Todo = (props) => {\r\n    var {todo, removeElement, completeTask} = props;\r\n    const completeText =  {\r\n      textDecoration: \"1px hsl(233, 14%, 35%) line-through\",\r\n      color: \"hsl(233, 14%, 35%)\"\r\n    }\r\n    const completeCircle =  {\r\n      background: \"url(/src/images/icon-check.svg) center no-repeat, linear-gradient(hsl(192, 100%, 67%), hsl(280, 87%, 65%))\"\r\n    }\r\n    return (\r\n  <div className=\"task-header\">\r\n    <input type=\"checkbox\" className=\"task-checkbox\" id ={todo.id}/>\r\n    <label htmlFor={todo.id} className=\"task-label\"  onClick={() => completeTask(todo)}>\r\n    <span style={ todo.completed? {...completeCircle}:null} className=\"circle\"></span>\r\n    </label>\r\n    <span className=\"task\" style={ todo.completed? {...completeText}:null}>{todo.title}</span>\r\n    <span className=\"cross\" onClick={() => removeElement(todo)}></span>\r\n</div>)\r\n}\r\n\r\nexport default Todo\r\n ","import React from 'react'\r\nimport { useState, useEffect } from 'react';\r\nimport Todo from './Todo';\r\nimport { v4 as uuidv4 } from \"uuid\"\r\n\r\nconst Header = () => {\r\n    const [todoList, setTodoList]=React.useState([{\r\n      id:uuidv4(),\r\n      title: \"Sample Todo\",\r\n      completed: false\r\n    }]);\r\n    useEffect(() => {\r\n      console.log(todoList);\r\n    }, [todoList])\r\n    const[all, setAll]=useState(true)\r\n    const [active, setActive]=useState(false);\r\n    const[completed, setCompleted]=useState(false);\r\n    const[compcount, setCompcount]=useState(0);\r\n    const changeTheme = () => {\r\n        document.body.classList.toggle(\"theme-light\");\r\n    }\r\nconst removeElement = (todo) => {\r\n        var array=[...todoList]\r\n        var index = array.indexOf(todo)\r\n        array.splice(index, 1);\r\n        setTodoList(array);\r\n      }\r\nconst addTask = () => {\r\nconst newItem=document.querySelector(\".add-task\");\r\nnewItem.addEventListener('keypress', (e) => {\r\n    if(e.charCode===13 &&  newItem.value.length>0){\r\n      setTodoList(todoList=>[...todoList,{\r\n        id:uuidv4(),\r\n            title: newItem.value,\r\n            completed: false\r\n        }]);\r\n        newItem.value='';\r\n    }\r\n});\r\n}\r\nconst clearCompleted = () => {\r\n  var i;\r\n  var array=[...todoList]\r\n  for(i=0; i<array.length; i++)\r\n  {\r\n    if(array[i].completed)\r\n    {\r\n      array.splice(i, 1);\r\n    }\r\n  }\r\n  setTodoList(array);\r\n\r\n}\r\nconst completeTask = (todo) => {\r\n    var array=[...todoList]\r\n        var index = array.indexOf(todo)\r\n    var item =array[index];\r\n    if(item.completed)\r\n    {\r\n      item.completed=false;\r\n    }\r\n    else\r\n    {\r\n      item.completed=true;\r\n    }\r\n    array[index]=item;\r\n    setTodoList(array);\r\n    setCompcount(0);\r\n    var i;\r\n    for(i=0; i<todoList.length; i++) {\r\n      if(!todoList[i].completed)\r\n      setCompcount(compcount+1)\r\n    }\r\n  }\r\n  const displayList = () =>\r\n  {\r\n    if(all)\r\n    {\r\n    return todoList.map((todo, index) =>\r\n      <Todo\r\n      key={index} \r\n      todo={todo}\r\n      removeElement={removeElement}\r\n      completeTask={completeTask}\r\n      />\r\n    )\r\n    }\r\n    else\r\n      if(active)\r\n    {\r\n      return todoList.map((todo, index) =>\r\n      todo.completed ? null : <Todo\r\n      key={index} \r\n      todo={todo}\r\n      removeElement={removeElement}\r\n      completeTask={completeTask}\r\n      />\r\n    )\r\n    }\r\n    else\r\n      if(completed)\r\n    {\r\n      return todoList.map((todo, index) =>\r\n      todo.completed ? <Todo\r\n      key={index} \r\n      todo={todo}\r\n      removeElement={removeElement}\r\n      completeTask={completeTask}\r\n      /> : null\r\n    )\r\n    }\r\n  }\r\n    return (\r\n <div>\r\n <div className=\"to-do-header\">\r\n  <h1>TODO</h1>\r\n      <div className=\"theme\" onClick={changeTheme}></div>\r\n  </div>\r\n  <div className=\"input-task\">\r\n  {/* <input type=\"checkbox\" className=\"add-task-checkbox\"/>\r\n  <span className=\"checkmark\"></span> */}\r\n  <input type=\"text\" className=\"form-control add-task\" placeholder=\"Create a new todo...\" onChange={addTask}/>\r\n  </div>\r\n  <div>\r\n   {displayList()}\r\n   </div>\r\n   <div className=\"task-status\">\r\n  {/* <p className=\"task-status-item\">{compcount} items left</p> */}\r\n  <form className=\"status\">\r\n  <input type=\"radio\" className=\"task-box\" id =\"all\" name=\"status\" defaultChecked/>\r\n  <label htmlFor=\"all\" className=\"stat\" onClick={() => {setAll(true); setActive(false); setCompleted(false);}}>All</label>\r\n  <input type=\"radio\" className=\"task-box\" id =\"active\" name=\"status\"/>\r\n  <label htmlFor=\"active\" className=\"stat\" onClick={() => {setAll(false); setActive(true); setCompleted(false);}}>Active </label>\r\n  <input type=\"radio\" className=\"task-box\" id =\"completed\" name=\"status\"/>\r\n  <label htmlFor=\"completed\" className=\"stat\" onClick={() => {setAll(false); setActive(false); setCompleted(true);}}>Completed</label>\r\n  </form>\r\n  <p className=\"task-status-item\" onClick={clearCompleted}>Clear completed</p>\r\n</div>\r\n   </div>\r\n    );\r\n}\r\n\r\nexport default Header\r\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './components/Header';\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Header/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}